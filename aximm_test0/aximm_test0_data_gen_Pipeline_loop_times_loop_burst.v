// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module aximm_test0_data_gen_Pipeline_loop_times_loop_burst (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strmDstPxl_din,
        strmDstPxl_full_n,
        strmDstPxl_write,
        strmDstPxl_num_data_valid,
        strmDstPxl_fifo_cap,
        bound,
        and_ln,
        trunc_ln
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [127:0] strmDstPxl_din;
input   strmDstPxl_full_n;
output   strmDstPxl_write;
input  [31:0] strmDstPxl_num_data_valid;
input  [31:0] strmDstPxl_fifo_cap;
input  [59:0] bound;
input  [31:0] and_ln;
input  [27:0] trunc_ln;

reg ap_idle;
reg strmDstPxl_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_146_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    strmDstPxl_blk_n;
wire    ap_block_pp0_stage0_grp1;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [0:0] cmp_i4_fu_117_p2;
reg   [0:0] cmp_i4_reg_410;
wire   [0:0] icmp_ln30_fu_160_p2;
reg   [0:0] icmp_ln30_reg_419;
reg   [0:0] icmp_ln30_reg_419_pp0_iter2_reg;
wire   [31:0] select_ln23_fu_197_p3;
reg   [31:0] select_ln23_reg_425;
reg   [27:0] j_fu_76;
wire   [27:0] j_2_fu_171_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] s_2_fu_80;
wire   [31:0] s_5_fu_356_p2;
reg   [31:0] s_fu_84;
wire   [31:0] select_ln23_2_fu_204_p3;
reg   [59:0] indvar_flatten_fu_88;
wire   [59:0] add_ln23_fu_154_p2;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [27:0] add_ln30_fu_165_p2;
wire   [31:0] s_4_fu_192_p2;
wire   [31:0] select_ln23_1_fu_219_p3;
wire   [7:0] empty_fu_225_p1;
wire   [7:0] add_ln34_14_fu_313_p2;
wire   [7:0] add_ln34_13_fu_307_p2;
wire   [7:0] add_ln34_12_fu_301_p2;
wire   [7:0] add_ln34_11_fu_295_p2;
wire   [7:0] add_ln34_10_fu_289_p2;
wire   [7:0] add_ln34_9_fu_283_p2;
wire   [7:0] add_ln34_8_fu_277_p2;
wire   [7:0] add_ln34_7_fu_271_p2;
wire   [7:0] add_ln34_6_fu_265_p2;
wire   [7:0] add_ln34_5_fu_259_p2;
wire   [7:0] add_ln34_4_fu_253_p2;
wire   [7:0] add_ln34_3_fu_247_p2;
wire   [7:0] add_ln34_2_fu_241_p2;
wire   [7:0] add_ln34_1_fu_235_p2;
wire   [7:0] add_ln34_fu_229_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 j_fu_76 = 28'd0;
#0 s_2_fu_80 = 32'd0;
#0 s_fu_84 = 32'd0;
#0 indvar_flatten_fu_88 = 60'd0;
#0 ap_done_reg = 1'b0;
end

aximm_test0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 60'd0;
        end else if (((icmp_ln23_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_88 <= add_ln23_fu_154_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_76 <= 28'd0;
        end else if (((icmp_ln23_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_76 <= j_2_fu_171_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            s_2_fu_80 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            s_2_fu_80 <= s_5_fu_356_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            s_fu_84 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            s_fu_84 <= select_ln23_2_fu_204_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        cmp_i4_reg_410 <= cmp_i4_fu_117_p2;
        icmp_ln30_reg_419 <= icmp_ln30_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln30_reg_419_pp0_iter2_reg <= icmp_ln30_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        select_ln23_reg_425 <= select_ln23_fu_197_p3;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        strmDstPxl_blk_n = strmDstPxl_full_n;
    end else begin
        strmDstPxl_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        strmDstPxl_write = 1'b1;
    end else begin
        strmDstPxl_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_154_p2 = (indvar_flatten_fu_88 + 60'd1);

assign add_ln30_fu_165_p2 = (j_fu_76 + 28'd1);

assign add_ln34_10_fu_289_p2 = (empty_fu_225_p1 + 8'd11);

assign add_ln34_11_fu_295_p2 = (empty_fu_225_p1 + 8'd12);

assign add_ln34_12_fu_301_p2 = (empty_fu_225_p1 + 8'd13);

assign add_ln34_13_fu_307_p2 = (empty_fu_225_p1 + 8'd14);

assign add_ln34_14_fu_313_p2 = (empty_fu_225_p1 + 8'd15);

assign add_ln34_1_fu_235_p2 = (empty_fu_225_p1 + 8'd2);

assign add_ln34_2_fu_241_p2 = (empty_fu_225_p1 + 8'd3);

assign add_ln34_3_fu_247_p2 = (empty_fu_225_p1 + 8'd4);

assign add_ln34_4_fu_253_p2 = (empty_fu_225_p1 + 8'd5);

assign add_ln34_5_fu_259_p2 = (empty_fu_225_p1 + 8'd6);

assign add_ln34_6_fu_265_p2 = (empty_fu_225_p1 + 8'd7);

assign add_ln34_7_fu_271_p2 = (empty_fu_225_p1 + 8'd8);

assign add_ln34_8_fu_277_p2 = (empty_fu_225_p1 + 8'd9);

assign add_ln34_9_fu_283_p2 = (empty_fu_225_p1 + 8'd10);

assign add_ln34_fu_229_p2 = (empty_fu_225_p1 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((strmDstPxl_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((strmDstPxl_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((strmDstPxl_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((strmDstPxl_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign cmp_i4_fu_117_p2 = ((trunc_ln != 28'd0) ? 1'b1 : 1'b0);

assign empty_fu_225_p1 = select_ln23_1_fu_219_p3[7:0];

assign icmp_ln23_fu_146_p2 = ((indvar_flatten_fu_88 == bound) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_160_p2 = ((j_fu_76 == trunc_ln) ? 1'b1 : 1'b0);

assign j_2_fu_171_p3 = ((icmp_ln30_fu_160_p2[0:0] == 1'b1) ? 28'd1 : add_ln30_fu_165_p2);

assign s_4_fu_192_p2 = (s_fu_84 + and_ln);

assign s_5_fu_356_p2 = (select_ln23_1_fu_219_p3 + 32'd16);

assign select_ln23_1_fu_219_p3 = ((icmp_ln30_reg_419_pp0_iter2_reg[0:0] == 1'b1) ? select_ln23_reg_425 : s_2_fu_80);

assign select_ln23_2_fu_204_p3 = ((icmp_ln30_reg_419[0:0] == 1'b1) ? select_ln23_fu_197_p3 : s_fu_84);

assign select_ln23_fu_197_p3 = ((cmp_i4_reg_410[0:0] == 1'b1) ? s_4_fu_192_p2 : s_fu_84);

assign strmDstPxl_din = {{{{{{{{{{{{{{{{add_ln34_14_fu_313_p2}, {add_ln34_13_fu_307_p2}}, {add_ln34_12_fu_301_p2}}, {add_ln34_11_fu_295_p2}}, {add_ln34_10_fu_289_p2}}, {add_ln34_9_fu_283_p2}}, {add_ln34_8_fu_277_p2}}, {add_ln34_7_fu_271_p2}}, {add_ln34_6_fu_265_p2}}, {add_ln34_5_fu_259_p2}}, {add_ln34_4_fu_253_p2}}, {add_ln34_3_fu_247_p2}}, {add_ln34_2_fu_241_p2}}, {add_ln34_1_fu_235_p2}}, {add_ln34_fu_229_p2}}, {empty_fu_225_p1}};

endmodule //aximm_test0_data_gen_Pipeline_loop_times_loop_burst
