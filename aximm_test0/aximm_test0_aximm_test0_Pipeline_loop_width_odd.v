// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module aximm_test0_aximm_test0_Pipeline_loop_width_odd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mm_video0_0_AWVALID,
        m_axi_mm_video0_0_AWREADY,
        m_axi_mm_video0_0_AWADDR,
        m_axi_mm_video0_0_AWID,
        m_axi_mm_video0_0_AWLEN,
        m_axi_mm_video0_0_AWSIZE,
        m_axi_mm_video0_0_AWBURST,
        m_axi_mm_video0_0_AWLOCK,
        m_axi_mm_video0_0_AWCACHE,
        m_axi_mm_video0_0_AWPROT,
        m_axi_mm_video0_0_AWQOS,
        m_axi_mm_video0_0_AWREGION,
        m_axi_mm_video0_0_AWUSER,
        m_axi_mm_video0_0_WVALID,
        m_axi_mm_video0_0_WREADY,
        m_axi_mm_video0_0_WDATA,
        m_axi_mm_video0_0_WSTRB,
        m_axi_mm_video0_0_WLAST,
        m_axi_mm_video0_0_WID,
        m_axi_mm_video0_0_WUSER,
        m_axi_mm_video0_0_ARVALID,
        m_axi_mm_video0_0_ARREADY,
        m_axi_mm_video0_0_ARADDR,
        m_axi_mm_video0_0_ARID,
        m_axi_mm_video0_0_ARLEN,
        m_axi_mm_video0_0_ARSIZE,
        m_axi_mm_video0_0_ARBURST,
        m_axi_mm_video0_0_ARLOCK,
        m_axi_mm_video0_0_ARCACHE,
        m_axi_mm_video0_0_ARPROT,
        m_axi_mm_video0_0_ARQOS,
        m_axi_mm_video0_0_ARREGION,
        m_axi_mm_video0_0_ARUSER,
        m_axi_mm_video0_0_RVALID,
        m_axi_mm_video0_0_RREADY,
        m_axi_mm_video0_0_RDATA,
        m_axi_mm_video0_0_RLAST,
        m_axi_mm_video0_0_RID,
        m_axi_mm_video0_0_RFIFONUM,
        m_axi_mm_video0_0_RUSER,
        m_axi_mm_video0_0_RRESP,
        m_axi_mm_video0_0_BVALID,
        m_axi_mm_video0_0_BREADY,
        m_axi_mm_video0_0_BRESP,
        m_axi_mm_video0_0_BID,
        m_axi_mm_video0_0_BUSER,
        trunc_ln1,
        shl_ln,
        i,
        sext_ln63,
        sext_ln63_1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mm_video0_0_AWVALID;
input   m_axi_mm_video0_0_AWREADY;
output  [63:0] m_axi_mm_video0_0_AWADDR;
output  [0:0] m_axi_mm_video0_0_AWID;
output  [31:0] m_axi_mm_video0_0_AWLEN;
output  [2:0] m_axi_mm_video0_0_AWSIZE;
output  [1:0] m_axi_mm_video0_0_AWBURST;
output  [1:0] m_axi_mm_video0_0_AWLOCK;
output  [3:0] m_axi_mm_video0_0_AWCACHE;
output  [2:0] m_axi_mm_video0_0_AWPROT;
output  [3:0] m_axi_mm_video0_0_AWQOS;
output  [3:0] m_axi_mm_video0_0_AWREGION;
output  [0:0] m_axi_mm_video0_0_AWUSER;
output   m_axi_mm_video0_0_WVALID;
input   m_axi_mm_video0_0_WREADY;
output  [127:0] m_axi_mm_video0_0_WDATA;
output  [15:0] m_axi_mm_video0_0_WSTRB;
output   m_axi_mm_video0_0_WLAST;
output  [0:0] m_axi_mm_video0_0_WID;
output  [0:0] m_axi_mm_video0_0_WUSER;
output   m_axi_mm_video0_0_ARVALID;
input   m_axi_mm_video0_0_ARREADY;
output  [63:0] m_axi_mm_video0_0_ARADDR;
output  [0:0] m_axi_mm_video0_0_ARID;
output  [31:0] m_axi_mm_video0_0_ARLEN;
output  [2:0] m_axi_mm_video0_0_ARSIZE;
output  [1:0] m_axi_mm_video0_0_ARBURST;
output  [1:0] m_axi_mm_video0_0_ARLOCK;
output  [3:0] m_axi_mm_video0_0_ARCACHE;
output  [2:0] m_axi_mm_video0_0_ARPROT;
output  [3:0] m_axi_mm_video0_0_ARQOS;
output  [3:0] m_axi_mm_video0_0_ARREGION;
output  [0:0] m_axi_mm_video0_0_ARUSER;
input   m_axi_mm_video0_0_RVALID;
output   m_axi_mm_video0_0_RREADY;
input  [127:0] m_axi_mm_video0_0_RDATA;
input   m_axi_mm_video0_0_RLAST;
input  [0:0] m_axi_mm_video0_0_RID;
input  [8:0] m_axi_mm_video0_0_RFIFONUM;
input  [0:0] m_axi_mm_video0_0_RUSER;
input  [1:0] m_axi_mm_video0_0_RRESP;
input   m_axi_mm_video0_0_BVALID;
output   m_axi_mm_video0_0_BREADY;
input  [1:0] m_axi_mm_video0_0_BRESP;
input  [0:0] m_axi_mm_video0_0_BID;
input  [0:0] m_axi_mm_video0_0_BUSER;
input  [27:0] trunc_ln1;
input  [27:0] shl_ln;
input  [30:0] i;
input  [59:0] sext_ln63;
input  [59:0] sext_ln63_1;

reg ap_idle;
reg m_axi_mm_video0_0_AWVALID;
reg[63:0] m_axi_mm_video0_0_AWADDR;
reg m_axi_mm_video0_0_WVALID;
reg[127:0] m_axi_mm_video0_0_WDATA;
reg m_axi_mm_video0_0_BREADY;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln63_reg_250;
reg    ap_block_state2_io_grp1;
reg    ap_block_pp0_stage1_subdone_grp1_done_reg;
reg    ap_block_pp0_stage1_subdone_grp1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone_grp4_done_reg;
reg    ap_block_pp0_stage1_subdone_grp4;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mm_video0_blk_n_AW;
wire    ap_block_pp0_stage1_grp1;
reg    mm_video0_blk_n_W;
wire    ap_block_pp0_stage0_grp2;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
reg    ap_block_pp0_stage0_subdone;
reg    mm_video0_blk_n_B;
wire    ap_block_pp0_stage0_grp3;
reg    ap_block_pp0_stage0_subdone_grp3_done_reg;
reg    ap_block_pp0_stage0_subdone_grp3;
wire    ap_block_pp0_stage1_grp4;
reg    ap_block_pp0_stage0_11001_grp2;
wire   [0:0] icmp_ln63_fu_158_p2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln63_reg_250_pp0_iter1_reg;
reg   [0:0] icmp_ln63_reg_250_pp0_iter2_reg;
wire   [27:0] or_ln66_fu_174_p2;
reg   [27:0] or_ln66_reg_254;
wire   [60:0] add_ln66_fu_180_p2;
reg   [60:0] add_ln66_reg_259;
wire   [60:0] add_ln67_fu_186_p2;
reg   [60:0] add_ln67_reg_264;
reg    ap_block_pp0_stage1_11001_grp1;
wire   [127:0] zext_ln66_fu_223_p1;
reg   [127:0] zext_ln66_reg_275;
reg    ap_block_pp0_stage0_11001_grp3;
wire  signed [63:0] sext_ln66_fu_197_p1;
wire  signed [63:0] sext_ln67_fu_228_p1;
wire    ap_block_pp0_stage0_01001_grp2;
reg    ap_block_pp0_stage1_11001_grp4;
wire    ap_block_pp0_stage1_01001_grp4;
reg   [27:0] j_fu_76;
wire   [27:0] j_2_fu_164_p2;
wire    ap_loop_init;
reg   [27:0] ap_sig_allocacmp_j_1;
wire    ap_block_pp0_stage0;
wire   [60:0] zext_ln63_fu_170_p1;
wire  signed [60:0] sext_ln63_cast_fu_146_p1;
wire  signed [60:0] sext_ln63_1_cast_fu_142_p1;
wire   [26:0] tmp_2_fu_207_p4;
wire   [54:0] tmp_3_fu_216_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage1_11001;
reg    ap_condition_exit_pp0_iter3_stage0;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to4;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_431;
reg    ap_condition_435;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp1_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp4_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp3_done_reg = 1'b0;
#0 j_fu_76 = 28'd0;
#0 ap_done_reg = 1'b0;
end

aximm_test0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
                ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp3)) begin
                ap_block_pp0_stage0_subdone_grp3_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp1)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp4_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp4_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp4)) begin
                ap_block_pp0_stage1_subdone_grp4_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_fu_158_p2 == 1'd0))) begin
            j_fu_76 <= j_2_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_76 <= 28'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln66_reg_259 <= add_ln66_fu_180_p2;
        add_ln67_reg_264 <= add_ln67_fu_186_p2;
        icmp_ln63_reg_250 <= icmp_ln63_fu_158_p2;
        icmp_ln63_reg_250_pp0_iter1_reg <= icmp_ln63_reg_250;
        icmp_ln63_reg_250_pp0_iter2_reg <= icmp_ln63_reg_250_pp0_iter1_reg;
        or_ln66_reg_254 <= or_ln66_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        zext_ln66_reg_275[54 : 0] <= zext_ln66_fu_223_p1[54 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln63_reg_250 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln63_reg_250_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 28'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_76;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp3) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg))) begin
        m_axi_mm_video0_0_AWADDR = sext_ln67_fu_228_p1;
    end else if (((icmp_ln63_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg))) begin
        m_axi_mm_video0_0_AWADDR = sext_ln66_fu_197_p1;
    end else begin
        m_axi_mm_video0_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln63_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp3) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)))) begin
        m_axi_mm_video0_0_AWVALID = 1'b1;
    end else begin
        m_axi_mm_video0_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp3) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)))) begin
        m_axi_mm_video0_0_BREADY = 1'b1;
    end else begin
        m_axi_mm_video0_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_435)) begin
            m_axi_mm_video0_0_WDATA = zext_ln66_reg_275;
        end else if ((1'b1 == ap_condition_431)) begin
            m_axi_mm_video0_0_WDATA = zext_ln66_fu_223_p1;
        end else begin
            m_axi_mm_video0_0_WDATA = 'bx;
        end
    end else begin
        m_axi_mm_video0_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp4) & (1'b0 == ap_block_pp0_stage1_subdone_grp4_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)))) begin
        m_axi_mm_video0_0_WVALID = 1'b1;
    end else begin
        m_axi_mm_video0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln63_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage0_grp3)))) begin
        mm_video0_blk_n_AW = m_axi_mm_video0_0_AWREADY;
    end else begin
        mm_video0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage0_grp3)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)))) begin
        mm_video0_blk_n_B = m_axi_mm_video0_0_BVALID;
    end else begin
        mm_video0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp4) & (1'b0 == ap_block_pp0_stage1_subdone_grp4_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_grp2)))) begin
        mm_video0_blk_n_W = m_axi_mm_video0_0_WREADY;
    end else begin
        mm_video0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_180_p2 = ($signed(zext_ln63_fu_170_p1) + $signed(sext_ln63_cast_fu_146_p1));

assign add_ln67_fu_186_p2 = ($signed(zext_ln63_fu_170_p1) + $signed(sext_ln63_1_cast_fu_142_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axi_mm_video0_0_AWREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)) | ((m_axi_mm_video0_0_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((m_axi_mm_video0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp3 = (((m_axi_mm_video0_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)) | ((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)));
end

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axi_mm_video0_0_AWREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)) | ((m_axi_mm_video0_0_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((m_axi_mm_video0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp3 = (((m_axi_mm_video0_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)) | ((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp3_done_reg)));
end

assign ap_block_pp0_stage1_01001_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((m_axi_mm_video0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp4_done_reg)) | ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = (((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp4 = ((m_axi_mm_video0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp4_done_reg));
end

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((m_axi_mm_video0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp4_done_reg)) | ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp1 = (((m_axi_mm_video0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp4 = ((m_axi_mm_video0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp4_done_reg));
end

always @ (*) begin
    ap_block_state2_io_grp1 = ((icmp_ln63_reg_250 == 1'd0) & (m_axi_mm_video0_0_AWREADY == 1'b0));
end

always @ (*) begin
    ap_condition_431 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_condition_435 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001_grp4) & (1'b0 == ap_block_pp0_stage1_subdone_grp4_done_reg));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln63_fu_158_p2 = ((ap_sig_allocacmp_j_1 == trunc_ln1) ? 1'b1 : 1'b0);

assign j_2_fu_164_p2 = (ap_sig_allocacmp_j_1 + 28'd1);

assign m_axi_mm_video0_0_ARADDR = 64'd0;

assign m_axi_mm_video0_0_ARBURST = 2'd0;

assign m_axi_mm_video0_0_ARCACHE = 4'd0;

assign m_axi_mm_video0_0_ARID = 1'd0;

assign m_axi_mm_video0_0_ARLEN = 32'd0;

assign m_axi_mm_video0_0_ARLOCK = 2'd0;

assign m_axi_mm_video0_0_ARPROT = 3'd0;

assign m_axi_mm_video0_0_ARQOS = 4'd0;

assign m_axi_mm_video0_0_ARREGION = 4'd0;

assign m_axi_mm_video0_0_ARSIZE = 3'd0;

assign m_axi_mm_video0_0_ARUSER = 1'd0;

assign m_axi_mm_video0_0_ARVALID = 1'b0;

assign m_axi_mm_video0_0_AWBURST = 2'd0;

assign m_axi_mm_video0_0_AWCACHE = 4'd0;

assign m_axi_mm_video0_0_AWID = 1'd0;

assign m_axi_mm_video0_0_AWLEN = 64'd1;

assign m_axi_mm_video0_0_AWLOCK = 2'd0;

assign m_axi_mm_video0_0_AWPROT = 3'd0;

assign m_axi_mm_video0_0_AWQOS = 4'd0;

assign m_axi_mm_video0_0_AWREGION = 4'd0;

assign m_axi_mm_video0_0_AWSIZE = 3'd0;

assign m_axi_mm_video0_0_AWUSER = 1'd0;

assign m_axi_mm_video0_0_RREADY = 1'b0;

assign m_axi_mm_video0_0_WID = 1'd0;

assign m_axi_mm_video0_0_WLAST = 1'b0;

assign m_axi_mm_video0_0_WSTRB = 16'd65535;

assign m_axi_mm_video0_0_WUSER = 1'd0;

assign or_ln66_fu_174_p2 = (shl_ln | ap_sig_allocacmp_j_1);

assign sext_ln63_1_cast_fu_142_p1 = $signed(sext_ln63_1);

assign sext_ln63_cast_fu_146_p1 = $signed(sext_ln63);

assign sext_ln66_fu_197_p1 = $signed(add_ln66_reg_259);

assign sext_ln67_fu_228_p1 = $signed(add_ln67_reg_264);

assign tmp_2_fu_207_p4 = {{i[30:4]}};

assign tmp_3_fu_216_p3 = {{tmp_2_fu_207_p4}, {or_ln66_reg_254}};

assign zext_ln63_fu_170_p1 = ap_sig_allocacmp_j_1;

assign zext_ln66_fu_223_p1 = tmp_3_fu_216_p3;

always @ (posedge ap_clk) begin
    zext_ln66_reg_275[127:55] <= 73'b0000000000000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //aximm_test0_aximm_test0_Pipeline_loop_width_odd
