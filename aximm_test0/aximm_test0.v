// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aximm_test0_aximm_test0,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a50t-csg325-2,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.840000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=2600,HLS_SYN_LUT=2832,HLS_VERSION=2024_2}" *)

module aximm_test0 (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST,
        m_axi_mm_video_WID,
        m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST,
        m_axi_mm_video_RID,
        m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP,
        m_axi_mm_video_BID,
        m_axi_mm_video_BUSER
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MM_VIDEO_ID_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ADDR_WIDTH = 64;
parameter    C_M_AXI_MM_VIDEO_DATA_WIDTH = 128;
parameter    C_M_AXI_MM_VIDEO_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_WUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_RUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_BUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_USER_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_PROT_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MM_VIDEO_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
output   m_axi_mm_video_AWVALID;
input   m_axi_mm_video_AWREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_AWADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_AWID;
output  [7:0] m_axi_mm_video_AWLEN;
output  [2:0] m_axi_mm_video_AWSIZE;
output  [1:0] m_axi_mm_video_AWBURST;
output  [1:0] m_axi_mm_video_AWLOCK;
output  [3:0] m_axi_mm_video_AWCACHE;
output  [2:0] m_axi_mm_video_AWPROT;
output  [3:0] m_axi_mm_video_AWQOS;
output  [3:0] m_axi_mm_video_AWREGION;
output  [C_M_AXI_MM_VIDEO_AWUSER_WIDTH - 1:0] m_axi_mm_video_AWUSER;
output   m_axi_mm_video_WVALID;
input   m_axi_mm_video_WREADY;
output  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_WDATA;
output  [C_M_AXI_MM_VIDEO_WSTRB_WIDTH - 1:0] m_axi_mm_video_WSTRB;
output   m_axi_mm_video_WLAST;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_WID;
output  [C_M_AXI_MM_VIDEO_WUSER_WIDTH - 1:0] m_axi_mm_video_WUSER;
output   m_axi_mm_video_ARVALID;
input   m_axi_mm_video_ARREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_ARADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_ARID;
output  [7:0] m_axi_mm_video_ARLEN;
output  [2:0] m_axi_mm_video_ARSIZE;
output  [1:0] m_axi_mm_video_ARBURST;
output  [1:0] m_axi_mm_video_ARLOCK;
output  [3:0] m_axi_mm_video_ARCACHE;
output  [2:0] m_axi_mm_video_ARPROT;
output  [3:0] m_axi_mm_video_ARQOS;
output  [3:0] m_axi_mm_video_ARREGION;
output  [C_M_AXI_MM_VIDEO_ARUSER_WIDTH - 1:0] m_axi_mm_video_ARUSER;
input   m_axi_mm_video_RVALID;
output   m_axi_mm_video_RREADY;
input  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_RDATA;
input   m_axi_mm_video_RLAST;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_RID;
input  [C_M_AXI_MM_VIDEO_RUSER_WIDTH - 1:0] m_axi_mm_video_RUSER;
input  [1:0] m_axi_mm_video_RRESP;
input   m_axi_mm_video_BVALID;
output   m_axi_mm_video_BREADY;
input  [1:0] m_axi_mm_video_BRESP;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_BID;
input  [C_M_AXI_MM_VIDEO_BUSER_WIDTH - 1:0] m_axi_mm_video_BUSER;

 reg    ap_rst_n_inv;
wire   [63:0] pDstPxl;
wire   [31:0] nSize;
wire   [31:0] nTimes;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    mm_video_0_AWREADY;
wire    mm_video_0_WREADY;
wire    mm_video_0_ARREADY;
wire    mm_video_0_RVALID;
wire   [127:0] mm_video_0_RDATA;
wire   [8:0] mm_video_0_RFIFONUM;
wire    mm_video_0_BVALID;
wire   [1:0] mm_video_0_BRESP;
wire   [0:0] mm_video_0_BID;
wire   [0:0] mm_video_0_BUSER;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire    entry_proc_U0_start_out;
wire    entry_proc_U0_start_write;
wire   [63:0] entry_proc_U0_pDstPxl_c_din;
wire    entry_proc_U0_pDstPxl_c_write;
wire    data_gen_U0_ap_start;
wire    data_gen_U0_ap_done;
wire    data_gen_U0_ap_continue;
wire    data_gen_U0_ap_idle;
wire    data_gen_U0_ap_ready;
wire   [127:0] data_gen_U0_strmDstPxl_din;
wire    data_gen_U0_strmDstPxl_write;
wire   [31:0] data_gen_U0_strmDstPxl_num_data_valid;
wire   [31:0] data_gen_U0_strmDstPxl_fifo_cap;
wire   [31:0] data_gen_U0_nSize_c_din;
wire    data_gen_U0_nSize_c_write;
wire   [31:0] data_gen_U0_nTimes_c_din;
wire    data_gen_U0_nTimes_c_write;
wire    fill_data_times_v2_U0_ap_start;
wire    fill_data_times_v2_U0_ap_done;
wire    fill_data_times_v2_U0_ap_continue;
wire    fill_data_times_v2_U0_ap_idle;
wire    fill_data_times_v2_U0_ap_ready;
wire    fill_data_times_v2_U0_strmDstPxl_read;
wire    fill_data_times_v2_U0_nSize_read;
wire    fill_data_times_v2_U0_nTimes_read;
wire    fill_data_times_v2_U0_m_axi_mm_video_0_AWVALID;
wire   [63:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWADDR;
wire   [0:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWID;
wire   [31:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWLEN;
wire   [2:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWSIZE;
wire   [1:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWBURST;
wire   [1:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWLOCK;
wire   [3:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWCACHE;
wire   [2:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWPROT;
wire   [3:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWQOS;
wire   [3:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWREGION;
wire   [0:0] fill_data_times_v2_U0_m_axi_mm_video_0_AWUSER;
wire    fill_data_times_v2_U0_m_axi_mm_video_0_WVALID;
wire   [127:0] fill_data_times_v2_U0_m_axi_mm_video_0_WDATA;
wire   [15:0] fill_data_times_v2_U0_m_axi_mm_video_0_WSTRB;
wire    fill_data_times_v2_U0_m_axi_mm_video_0_WLAST;
wire   [0:0] fill_data_times_v2_U0_m_axi_mm_video_0_WID;
wire   [0:0] fill_data_times_v2_U0_m_axi_mm_video_0_WUSER;
wire    fill_data_times_v2_U0_m_axi_mm_video_0_ARVALID;
wire   [63:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARADDR;
wire   [0:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARID;
wire   [31:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARLEN;
wire   [2:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARSIZE;
wire   [1:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARBURST;
wire   [1:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARLOCK;
wire   [3:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARCACHE;
wire   [2:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARPROT;
wire   [3:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARQOS;
wire   [3:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARREGION;
wire   [0:0] fill_data_times_v2_U0_m_axi_mm_video_0_ARUSER;
wire    fill_data_times_v2_U0_m_axi_mm_video_0_RREADY;
wire    fill_data_times_v2_U0_m_axi_mm_video_0_BREADY;
wire    fill_data_times_v2_U0_pDstPxl_read;
wire    pDstPxl_c_full_n;
wire   [63:0] pDstPxl_c_dout;
wire    pDstPxl_c_empty_n;
wire   [2:0] pDstPxl_c_num_data_valid;
wire   [2:0] pDstPxl_c_fifo_cap;
wire    strmDstPxl_full_n;
wire   [127:0] strmDstPxl_dout;
wire    strmDstPxl_empty_n;
wire   [2:0] strmDstPxl_num_data_valid;
wire   [2:0] strmDstPxl_fifo_cap;
wire    nSize_c_full_n;
wire   [31:0] nSize_c_dout;
wire    nSize_c_empty_n;
wire   [2:0] nSize_c_num_data_valid;
wire   [2:0] nSize_c_fifo_cap;
wire    nTimes_c_full_n;
wire   [31:0] nTimes_c_dout;
wire    nTimes_c_empty_n;
wire   [2:0] nTimes_c_num_data_valid;
wire   [2:0] nTimes_c_fifo_cap;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_data_gen_U0_ap_ready;
wire    ap_sync_data_gen_U0_ap_ready;
wire   [0:0] start_for_fill_data_times_v2_U0_din;
wire    start_for_fill_data_times_v2_U0_full_n;
wire   [0:0] start_for_fill_data_times_v2_U0_dout;
wire    start_for_fill_data_times_v2_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_data_gen_U0_ap_ready = 1'b0;
end

aximm_test0_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .pDstPxl(pDstPxl),
    .nSize(nSize),
    .nTimes(nTimes),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

aximm_test0_mm_video_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MM_VIDEO_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MM_VIDEO_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MM_VIDEO_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MM_VIDEO_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MM_VIDEO_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MM_VIDEO_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MM_VIDEO_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MM_VIDEO_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MM_VIDEO_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MM_VIDEO_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MM_VIDEO_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 128 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 0 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
mm_video_m_axi_U(
    .AWVALID(m_axi_mm_video_AWVALID),
    .AWREADY(m_axi_mm_video_AWREADY),
    .AWADDR(m_axi_mm_video_AWADDR),
    .AWID(m_axi_mm_video_AWID),
    .AWLEN(m_axi_mm_video_AWLEN),
    .AWSIZE(m_axi_mm_video_AWSIZE),
    .AWBURST(m_axi_mm_video_AWBURST),
    .AWLOCK(m_axi_mm_video_AWLOCK),
    .AWCACHE(m_axi_mm_video_AWCACHE),
    .AWPROT(m_axi_mm_video_AWPROT),
    .AWQOS(m_axi_mm_video_AWQOS),
    .AWREGION(m_axi_mm_video_AWREGION),
    .AWUSER(m_axi_mm_video_AWUSER),
    .WVALID(m_axi_mm_video_WVALID),
    .WREADY(m_axi_mm_video_WREADY),
    .WDATA(m_axi_mm_video_WDATA),
    .WSTRB(m_axi_mm_video_WSTRB),
    .WLAST(m_axi_mm_video_WLAST),
    .WID(m_axi_mm_video_WID),
    .WUSER(m_axi_mm_video_WUSER),
    .ARVALID(m_axi_mm_video_ARVALID),
    .ARREADY(m_axi_mm_video_ARREADY),
    .ARADDR(m_axi_mm_video_ARADDR),
    .ARID(m_axi_mm_video_ARID),
    .ARLEN(m_axi_mm_video_ARLEN),
    .ARSIZE(m_axi_mm_video_ARSIZE),
    .ARBURST(m_axi_mm_video_ARBURST),
    .ARLOCK(m_axi_mm_video_ARLOCK),
    .ARCACHE(m_axi_mm_video_ARCACHE),
    .ARPROT(m_axi_mm_video_ARPROT),
    .ARQOS(m_axi_mm_video_ARQOS),
    .ARREGION(m_axi_mm_video_ARREGION),
    .ARUSER(m_axi_mm_video_ARUSER),
    .RVALID(m_axi_mm_video_RVALID),
    .RREADY(m_axi_mm_video_RREADY),
    .RDATA(m_axi_mm_video_RDATA),
    .RLAST(m_axi_mm_video_RLAST),
    .RID(m_axi_mm_video_RID),
    .RUSER(m_axi_mm_video_RUSER),
    .RRESP(m_axi_mm_video_RRESP),
    .BVALID(m_axi_mm_video_BVALID),
    .BREADY(m_axi_mm_video_BREADY),
    .BRESP(m_axi_mm_video_BRESP),
    .BID(m_axi_mm_video_BID),
    .BUSER(m_axi_mm_video_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(1'b0),
    .I_CH0_ARREADY(mm_video_0_ARREADY),
    .I_CH0_ARADDR(64'd0),
    .I_CH0_ARLEN(32'd0),
    .I_CH0_RVALID(mm_video_0_RVALID),
    .I_CH0_RREADY(1'b0),
    .I_CH0_RDATA(mm_video_0_RDATA),
    .I_CH0_RFIFONUM(mm_video_0_RFIFONUM),
    .I_CH0_AWVALID(fill_data_times_v2_U0_m_axi_mm_video_0_AWVALID),
    .I_CH0_AWREADY(mm_video_0_AWREADY),
    .I_CH0_AWADDR(fill_data_times_v2_U0_m_axi_mm_video_0_AWADDR),
    .I_CH0_AWLEN(fill_data_times_v2_U0_m_axi_mm_video_0_AWLEN),
    .I_CH0_WVALID(fill_data_times_v2_U0_m_axi_mm_video_0_WVALID),
    .I_CH0_WREADY(mm_video_0_WREADY),
    .I_CH0_WDATA(fill_data_times_v2_U0_m_axi_mm_video_0_WDATA),
    .I_CH0_WSTRB(fill_data_times_v2_U0_m_axi_mm_video_0_WSTRB),
    .I_CH0_BVALID(mm_video_0_BVALID),
    .I_CH0_BREADY(fill_data_times_v2_U0_m_axi_mm_video_0_BREADY)
);

aximm_test0_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(entry_proc_U0_ap_start),
    .start_full_n(start_for_fill_data_times_v2_U0_full_n),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .start_out(entry_proc_U0_start_out),
    .start_write(entry_proc_U0_start_write),
    .pDstPxl(pDstPxl),
    .pDstPxl_c_din(entry_proc_U0_pDstPxl_c_din),
    .pDstPxl_c_full_n(pDstPxl_c_full_n),
    .pDstPxl_c_write(entry_proc_U0_pDstPxl_c_write),
    .pDstPxl_c_num_data_valid(pDstPxl_c_num_data_valid),
    .pDstPxl_c_fifo_cap(pDstPxl_c_fifo_cap)
);

aximm_test0_data_gen data_gen_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(data_gen_U0_ap_start),
    .ap_done(data_gen_U0_ap_done),
    .ap_continue(data_gen_U0_ap_continue),
    .ap_idle(data_gen_U0_ap_idle),
    .ap_ready(data_gen_U0_ap_ready),
    .nSize(nSize),
    .nTimes(nTimes),
    .strmDstPxl_din(data_gen_U0_strmDstPxl_din),
    .strmDstPxl_full_n(strmDstPxl_full_n),
    .strmDstPxl_write(data_gen_U0_strmDstPxl_write),
    .strmDstPxl_num_data_valid(data_gen_U0_strmDstPxl_num_data_valid),
    .strmDstPxl_fifo_cap(data_gen_U0_strmDstPxl_fifo_cap),
    .nSize_c_din(data_gen_U0_nSize_c_din),
    .nSize_c_full_n(nSize_c_full_n),
    .nSize_c_write(data_gen_U0_nSize_c_write),
    .nSize_c_num_data_valid(nSize_c_num_data_valid),
    .nSize_c_fifo_cap(nSize_c_fifo_cap),
    .nTimes_c_din(data_gen_U0_nTimes_c_din),
    .nTimes_c_full_n(nTimes_c_full_n),
    .nTimes_c_write(data_gen_U0_nTimes_c_write),
    .nTimes_c_num_data_valid(nTimes_c_num_data_valid),
    .nTimes_c_fifo_cap(nTimes_c_fifo_cap)
);

aximm_test0_fill_data_times_v2 fill_data_times_v2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(fill_data_times_v2_U0_ap_start),
    .ap_done(fill_data_times_v2_U0_ap_done),
    .ap_continue(fill_data_times_v2_U0_ap_continue),
    .ap_idle(fill_data_times_v2_U0_ap_idle),
    .ap_ready(fill_data_times_v2_U0_ap_ready),
    .strmDstPxl_dout(strmDstPxl_dout),
    .strmDstPxl_empty_n(strmDstPxl_empty_n),
    .strmDstPxl_read(fill_data_times_v2_U0_strmDstPxl_read),
    .strmDstPxl_num_data_valid(strmDstPxl_num_data_valid),
    .strmDstPxl_fifo_cap(strmDstPxl_fifo_cap),
    .nSize_dout(nSize_c_dout),
    .nSize_empty_n(nSize_c_empty_n),
    .nSize_read(fill_data_times_v2_U0_nSize_read),
    .nSize_num_data_valid(nSize_c_num_data_valid),
    .nSize_fifo_cap(nSize_c_fifo_cap),
    .nTimes_dout(nTimes_c_dout),
    .nTimes_empty_n(nTimes_c_empty_n),
    .nTimes_read(fill_data_times_v2_U0_nTimes_read),
    .nTimes_num_data_valid(nTimes_c_num_data_valid),
    .nTimes_fifo_cap(nTimes_c_fifo_cap),
    .m_axi_mm_video_0_AWVALID(fill_data_times_v2_U0_m_axi_mm_video_0_AWVALID),
    .m_axi_mm_video_0_AWREADY(mm_video_0_AWREADY),
    .m_axi_mm_video_0_AWADDR(fill_data_times_v2_U0_m_axi_mm_video_0_AWADDR),
    .m_axi_mm_video_0_AWID(fill_data_times_v2_U0_m_axi_mm_video_0_AWID),
    .m_axi_mm_video_0_AWLEN(fill_data_times_v2_U0_m_axi_mm_video_0_AWLEN),
    .m_axi_mm_video_0_AWSIZE(fill_data_times_v2_U0_m_axi_mm_video_0_AWSIZE),
    .m_axi_mm_video_0_AWBURST(fill_data_times_v2_U0_m_axi_mm_video_0_AWBURST),
    .m_axi_mm_video_0_AWLOCK(fill_data_times_v2_U0_m_axi_mm_video_0_AWLOCK),
    .m_axi_mm_video_0_AWCACHE(fill_data_times_v2_U0_m_axi_mm_video_0_AWCACHE),
    .m_axi_mm_video_0_AWPROT(fill_data_times_v2_U0_m_axi_mm_video_0_AWPROT),
    .m_axi_mm_video_0_AWQOS(fill_data_times_v2_U0_m_axi_mm_video_0_AWQOS),
    .m_axi_mm_video_0_AWREGION(fill_data_times_v2_U0_m_axi_mm_video_0_AWREGION),
    .m_axi_mm_video_0_AWUSER(fill_data_times_v2_U0_m_axi_mm_video_0_AWUSER),
    .m_axi_mm_video_0_WVALID(fill_data_times_v2_U0_m_axi_mm_video_0_WVALID),
    .m_axi_mm_video_0_WREADY(mm_video_0_WREADY),
    .m_axi_mm_video_0_WDATA(fill_data_times_v2_U0_m_axi_mm_video_0_WDATA),
    .m_axi_mm_video_0_WSTRB(fill_data_times_v2_U0_m_axi_mm_video_0_WSTRB),
    .m_axi_mm_video_0_WLAST(fill_data_times_v2_U0_m_axi_mm_video_0_WLAST),
    .m_axi_mm_video_0_WID(fill_data_times_v2_U0_m_axi_mm_video_0_WID),
    .m_axi_mm_video_0_WUSER(fill_data_times_v2_U0_m_axi_mm_video_0_WUSER),
    .m_axi_mm_video_0_ARVALID(fill_data_times_v2_U0_m_axi_mm_video_0_ARVALID),
    .m_axi_mm_video_0_ARREADY(1'b0),
    .m_axi_mm_video_0_ARADDR(fill_data_times_v2_U0_m_axi_mm_video_0_ARADDR),
    .m_axi_mm_video_0_ARID(fill_data_times_v2_U0_m_axi_mm_video_0_ARID),
    .m_axi_mm_video_0_ARLEN(fill_data_times_v2_U0_m_axi_mm_video_0_ARLEN),
    .m_axi_mm_video_0_ARSIZE(fill_data_times_v2_U0_m_axi_mm_video_0_ARSIZE),
    .m_axi_mm_video_0_ARBURST(fill_data_times_v2_U0_m_axi_mm_video_0_ARBURST),
    .m_axi_mm_video_0_ARLOCK(fill_data_times_v2_U0_m_axi_mm_video_0_ARLOCK),
    .m_axi_mm_video_0_ARCACHE(fill_data_times_v2_U0_m_axi_mm_video_0_ARCACHE),
    .m_axi_mm_video_0_ARPROT(fill_data_times_v2_U0_m_axi_mm_video_0_ARPROT),
    .m_axi_mm_video_0_ARQOS(fill_data_times_v2_U0_m_axi_mm_video_0_ARQOS),
    .m_axi_mm_video_0_ARREGION(fill_data_times_v2_U0_m_axi_mm_video_0_ARREGION),
    .m_axi_mm_video_0_ARUSER(fill_data_times_v2_U0_m_axi_mm_video_0_ARUSER),
    .m_axi_mm_video_0_RVALID(1'b0),
    .m_axi_mm_video_0_RREADY(fill_data_times_v2_U0_m_axi_mm_video_0_RREADY),
    .m_axi_mm_video_0_RDATA(128'd0),
    .m_axi_mm_video_0_RLAST(1'b0),
    .m_axi_mm_video_0_RID(1'd0),
    .m_axi_mm_video_0_RFIFONUM(9'd0),
    .m_axi_mm_video_0_RUSER(1'd0),
    .m_axi_mm_video_0_RRESP(2'd0),
    .m_axi_mm_video_0_BVALID(mm_video_0_BVALID),
    .m_axi_mm_video_0_BREADY(fill_data_times_v2_U0_m_axi_mm_video_0_BREADY),
    .m_axi_mm_video_0_BRESP(mm_video_0_BRESP),
    .m_axi_mm_video_0_BID(mm_video_0_BID),
    .m_axi_mm_video_0_BUSER(mm_video_0_BUSER),
    .pDstPxl_dout(pDstPxl_c_dout),
    .pDstPxl_empty_n(pDstPxl_c_empty_n),
    .pDstPxl_read(fill_data_times_v2_U0_pDstPxl_read),
    .pDstPxl_num_data_valid(pDstPxl_c_num_data_valid),
    .pDstPxl_fifo_cap(pDstPxl_c_fifo_cap)
);

aximm_test0_fifo_w64_d3_S pDstPxl_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_pDstPxl_c_din),
    .if_full_n(pDstPxl_c_full_n),
    .if_write(entry_proc_U0_pDstPxl_c_write),
    .if_dout(pDstPxl_c_dout),
    .if_empty_n(pDstPxl_c_empty_n),
    .if_read(fill_data_times_v2_U0_pDstPxl_read),
    .if_num_data_valid(pDstPxl_c_num_data_valid),
    .if_fifo_cap(pDstPxl_c_fifo_cap)
);

aximm_test0_fifo_w128_d2_S strmDstPxl_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_gen_U0_strmDstPxl_din),
    .if_full_n(strmDstPxl_full_n),
    .if_write(data_gen_U0_strmDstPxl_write),
    .if_dout(strmDstPxl_dout),
    .if_empty_n(strmDstPxl_empty_n),
    .if_read(fill_data_times_v2_U0_strmDstPxl_read),
    .if_num_data_valid(strmDstPxl_num_data_valid),
    .if_fifo_cap(strmDstPxl_fifo_cap)
);

aximm_test0_fifo_w32_d2_S nSize_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_gen_U0_nSize_c_din),
    .if_full_n(nSize_c_full_n),
    .if_write(data_gen_U0_nSize_c_write),
    .if_dout(nSize_c_dout),
    .if_empty_n(nSize_c_empty_n),
    .if_read(fill_data_times_v2_U0_nSize_read),
    .if_num_data_valid(nSize_c_num_data_valid),
    .if_fifo_cap(nSize_c_fifo_cap)
);

aximm_test0_fifo_w32_d2_S nTimes_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_gen_U0_nTimes_c_din),
    .if_full_n(nTimes_c_full_n),
    .if_write(data_gen_U0_nTimes_c_write),
    .if_dout(nTimes_c_dout),
    .if_empty_n(nTimes_c_empty_n),
    .if_read(fill_data_times_v2_U0_nTimes_read),
    .if_num_data_valid(nTimes_c_num_data_valid),
    .if_fifo_cap(nTimes_c_fifo_cap)
);

aximm_test0_start_for_fill_data_times_v2_U0 start_for_fill_data_times_v2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_fill_data_times_v2_U0_din),
    .if_full_n(start_for_fill_data_times_v2_U0_full_n),
    .if_write(entry_proc_U0_start_write),
    .if_dout(start_for_fill_data_times_v2_U0_dout),
    .if_empty_n(start_for_fill_data_times_v2_U0_empty_n),
    .if_read(fill_data_times_v2_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_data_gen_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_data_gen_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_data_gen_U0_ap_ready <= ap_sync_data_gen_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

assign ap_done = fill_data_times_v2_U0_ap_done;

assign ap_idle = (fill_data_times_v2_U0_ap_idle & entry_proc_U0_ap_idle & data_gen_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_data_gen_U0_ap_ready = (data_gen_U0_ap_ready | ap_sync_reg_data_gen_U0_ap_ready);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_ready = (ap_sync_entry_proc_U0_ap_ready & ap_sync_data_gen_U0_ap_ready);

assign data_gen_U0_ap_continue = 1'b1;

assign data_gen_U0_ap_start = ((ap_sync_reg_data_gen_U0_ap_ready ^ 1'b1) & ap_start);

assign data_gen_U0_strmDstPxl_fifo_cap = strmDstPxl_fifo_cap;

assign data_gen_U0_strmDstPxl_num_data_valid = strmDstPxl_num_data_valid;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign fill_data_times_v2_U0_ap_continue = 1'b1;

assign fill_data_times_v2_U0_ap_start = start_for_fill_data_times_v2_U0_empty_n;

assign mm_video_0_BID = 1'd0;

assign mm_video_0_BRESP = 2'd0;

assign mm_video_0_BUSER = 1'd0;

assign start_for_fill_data_times_v2_U0_din = 1'b1;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "aximm_test0_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //aximm_test0

