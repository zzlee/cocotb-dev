// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module aximm_test0_fill_data_times_v2_Pipeline_loop_preload_loop_burst (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mm_video_0_AWVALID,
        m_axi_mm_video_0_AWREADY,
        m_axi_mm_video_0_AWADDR,
        m_axi_mm_video_0_AWID,
        m_axi_mm_video_0_AWLEN,
        m_axi_mm_video_0_AWSIZE,
        m_axi_mm_video_0_AWBURST,
        m_axi_mm_video_0_AWLOCK,
        m_axi_mm_video_0_AWCACHE,
        m_axi_mm_video_0_AWPROT,
        m_axi_mm_video_0_AWQOS,
        m_axi_mm_video_0_AWREGION,
        m_axi_mm_video_0_AWUSER,
        m_axi_mm_video_0_WVALID,
        m_axi_mm_video_0_WREADY,
        m_axi_mm_video_0_WDATA,
        m_axi_mm_video_0_WSTRB,
        m_axi_mm_video_0_WLAST,
        m_axi_mm_video_0_WID,
        m_axi_mm_video_0_WUSER,
        m_axi_mm_video_0_ARVALID,
        m_axi_mm_video_0_ARREADY,
        m_axi_mm_video_0_ARADDR,
        m_axi_mm_video_0_ARID,
        m_axi_mm_video_0_ARLEN,
        m_axi_mm_video_0_ARSIZE,
        m_axi_mm_video_0_ARBURST,
        m_axi_mm_video_0_ARLOCK,
        m_axi_mm_video_0_ARCACHE,
        m_axi_mm_video_0_ARPROT,
        m_axi_mm_video_0_ARQOS,
        m_axi_mm_video_0_ARREGION,
        m_axi_mm_video_0_ARUSER,
        m_axi_mm_video_0_RVALID,
        m_axi_mm_video_0_RREADY,
        m_axi_mm_video_0_RDATA,
        m_axi_mm_video_0_RLAST,
        m_axi_mm_video_0_RID,
        m_axi_mm_video_0_RFIFONUM,
        m_axi_mm_video_0_RUSER,
        m_axi_mm_video_0_RRESP,
        m_axi_mm_video_0_BVALID,
        m_axi_mm_video_0_BREADY,
        m_axi_mm_video_0_BRESP,
        m_axi_mm_video_0_BID,
        m_axi_mm_video_0_BUSER,
        strmDstPxl_dout,
        strmDstPxl_empty_n,
        strmDstPxl_read,
        strmDstPxl_num_data_valid,
        strmDstPxl_fifo_cap,
        bound,
        nSizePC,
        wide_trip_count,
        p_cast_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mm_video_0_AWVALID;
input   m_axi_mm_video_0_AWREADY;
output  [63:0] m_axi_mm_video_0_AWADDR;
output  [0:0] m_axi_mm_video_0_AWID;
output  [31:0] m_axi_mm_video_0_AWLEN;
output  [2:0] m_axi_mm_video_0_AWSIZE;
output  [1:0] m_axi_mm_video_0_AWBURST;
output  [1:0] m_axi_mm_video_0_AWLOCK;
output  [3:0] m_axi_mm_video_0_AWCACHE;
output  [2:0] m_axi_mm_video_0_AWPROT;
output  [3:0] m_axi_mm_video_0_AWQOS;
output  [3:0] m_axi_mm_video_0_AWREGION;
output  [0:0] m_axi_mm_video_0_AWUSER;
output   m_axi_mm_video_0_WVALID;
input   m_axi_mm_video_0_WREADY;
output  [127:0] m_axi_mm_video_0_WDATA;
output  [15:0] m_axi_mm_video_0_WSTRB;
output   m_axi_mm_video_0_WLAST;
output  [0:0] m_axi_mm_video_0_WID;
output  [0:0] m_axi_mm_video_0_WUSER;
output   m_axi_mm_video_0_ARVALID;
input   m_axi_mm_video_0_ARREADY;
output  [63:0] m_axi_mm_video_0_ARADDR;
output  [0:0] m_axi_mm_video_0_ARID;
output  [31:0] m_axi_mm_video_0_ARLEN;
output  [2:0] m_axi_mm_video_0_ARSIZE;
output  [1:0] m_axi_mm_video_0_ARBURST;
output  [1:0] m_axi_mm_video_0_ARLOCK;
output  [3:0] m_axi_mm_video_0_ARCACHE;
output  [2:0] m_axi_mm_video_0_ARPROT;
output  [3:0] m_axi_mm_video_0_ARQOS;
output  [3:0] m_axi_mm_video_0_ARREGION;
output  [0:0] m_axi_mm_video_0_ARUSER;
input   m_axi_mm_video_0_RVALID;
output   m_axi_mm_video_0_RREADY;
input  [127:0] m_axi_mm_video_0_RDATA;
input   m_axi_mm_video_0_RLAST;
input  [0:0] m_axi_mm_video_0_RID;
input  [8:0] m_axi_mm_video_0_RFIFONUM;
input  [0:0] m_axi_mm_video_0_RUSER;
input  [1:0] m_axi_mm_video_0_RRESP;
input   m_axi_mm_video_0_BVALID;
output   m_axi_mm_video_0_BREADY;
input  [1:0] m_axi_mm_video_0_BRESP;
input  [0:0] m_axi_mm_video_0_BID;
input  [0:0] m_axi_mm_video_0_BUSER;
input  [127:0] strmDstPxl_dout;
input   strmDstPxl_empty_n;
output   strmDstPxl_read;
input  [2:0] strmDstPxl_num_data_valid;
input  [2:0] strmDstPxl_fifo_cap;
input  [59:0] bound;
input  [27:0] nSizePC;
input  [27:0] wide_trip_count;
input  [59:0] p_cast_cast;

reg ap_idle;
reg m_axi_mm_video_0_AWVALID;
reg m_axi_mm_video_0_WVALID;
reg m_axi_mm_video_0_BREADY;
reg strmDstPxl_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg   [0:0] or_ln130_reg_250;
reg    ap_block_state3_io_grp1;
reg   [0:0] icmp_ln132_1_reg_270;
reg   [0:0] icmp_ln132_1_reg_270_pp0_iter7_reg;
reg    ap_block_state9_pp0_stage0_iter8_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln130_fu_155_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    strmDstPxl_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    mm_video_blk_n_B;
reg    mm_video_blk_n_W;
reg    mm_video_blk_n_AW;
reg   [0:0] first_iter_0_reg_119;
reg    ap_block_pp0_stage0_11001;
wire  signed [63:0] p_cast_cast_cast_fu_131_p1;
reg  signed [63:0] p_cast_cast_cast_reg_236;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [63:0] wide_trip_count_cast_fu_135_p1;
reg   [63:0] wide_trip_count_cast_reg_241;
reg   [0:0] icmp_ln130_reg_246;
wire   [0:0] or_ln130_fu_171_p2;
wire   [27:0] select_ln132_fu_183_p3;
reg   [27:0] select_ln132_reg_254;
reg   [127:0] strmDstPxl_read_reg_265;
wire   [0:0] icmp_ln132_1_fu_207_p2;
reg   [0:0] icmp_ln132_1_reg_270_pp0_iter3_reg;
reg   [0:0] icmp_ln132_1_reg_270_pp0_iter4_reg;
reg   [0:0] icmp_ln132_1_reg_270_pp0_iter5_reg;
reg   [0:0] icmp_ln132_1_reg_270_pp0_iter6_reg;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_123_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg   [27:0] j_fu_66;
reg   [59:0] indvar_flatten_fu_70;
wire   [59:0] add_ln130_fu_160_p2;
wire   [0:0] icmp_ln132_fu_166_p2;
wire   [27:0] add_ln132_fu_177_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 j_fu_66 = 28'd0;
#0 indvar_flatten_fu_70 = 60'd0;
#0 ap_done_reg = 1'b0;
end

aximm_test0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln130_reg_246 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_119 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_119 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 60'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln130_fu_155_p2 == 1'd0))) begin
            indvar_flatten_fu_70 <= add_ln130_fu_160_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 28'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln130_fu_155_p2 == 1'd0))) begin
            j_fu_66 <= select_ln132_fu_183_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln130_reg_246 <= icmp_ln130_fu_155_p2;
        or_ln130_reg_250 <= or_ln130_fu_171_p2;
        select_ln132_reg_254 <= select_ln132_fu_183_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        icmp_ln132_1_reg_270 <= icmp_ln132_1_fu_207_p2;
        icmp_ln132_1_reg_270_pp0_iter3_reg <= icmp_ln132_1_reg_270;
        icmp_ln132_1_reg_270_pp0_iter4_reg <= icmp_ln132_1_reg_270_pp0_iter3_reg;
        icmp_ln132_1_reg_270_pp0_iter5_reg <= icmp_ln132_1_reg_270_pp0_iter4_reg;
        icmp_ln132_1_reg_270_pp0_iter6_reg <= icmp_ln132_1_reg_270_pp0_iter5_reg;
        icmp_ln132_1_reg_270_pp0_iter7_reg <= icmp_ln132_1_reg_270_pp0_iter6_reg;
        strmDstPxl_read_reg_265 <= strmDstPxl_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        p_cast_cast_cast_reg_236 <= p_cast_cast_cast_fu_131_p1;
        wide_trip_count_cast_reg_241[27 : 0] <= wide_trip_count_cast_fu_135_p1[27 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln130_fu_155_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln130_reg_246 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_123_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_123_p4 = first_iter_0_reg_119;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (or_ln130_reg_250 == 1'd1))) begin
        m_axi_mm_video_0_AWVALID = 1'b1;
    end else begin
        m_axi_mm_video_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln132_1_reg_270_pp0_iter7_reg == 1'd1))) begin
        m_axi_mm_video_0_BREADY = 1'b1;
    end else begin
        m_axi_mm_video_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_mm_video_0_WVALID = 1'b1;
    end else begin
        m_axi_mm_video_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1) & (or_ln130_reg_250 == 1'd1))) begin
        mm_video_blk_n_AW = m_axi_mm_video_0_AWREADY;
    end else begin
        mm_video_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln132_1_reg_270_pp0_iter7_reg == 1'd1))) begin
        mm_video_blk_n_B = m_axi_mm_video_0_BVALID;
    end else begin
        mm_video_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        mm_video_blk_n_W = m_axi_mm_video_0_WREADY;
    end else begin
        mm_video_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        strmDstPxl_blk_n = strmDstPxl_empty_n;
    end else begin
        strmDstPxl_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        strmDstPxl_read = 1'b1;
    end else begin
        strmDstPxl_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_fu_160_p2 = (indvar_flatten_fu_70 + 60'd1);

assign add_ln132_fu_177_p2 = (j_fu_66 + 28'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (strmDstPxl_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((m_axi_mm_video_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io_grp1) | (strmDstPxl_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((m_axi_mm_video_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io_grp1) | (strmDstPxl_empty_n == 1'b0))));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8_grp1)) | ((m_axi_mm_video_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io_grp1) | (strmDstPxl_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state3_io_grp1 = ((m_axi_mm_video_0_AWREADY == 1'b0) & (or_ln130_reg_250 == 1'd1));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8_grp1 = ((m_axi_mm_video_0_BVALID == 1'b0) & (icmp_ln132_1_reg_270_pp0_iter7_reg == 1'd1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln130_fu_155_p2 = ((indvar_flatten_fu_70 == bound) ? 1'b1 : 1'b0);

assign icmp_ln132_1_fu_207_p2 = ((select_ln132_reg_254 == nSizePC) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_166_p2 = ((j_fu_66 == nSizePC) ? 1'b1 : 1'b0);

assign m_axi_mm_video_0_ARADDR = 64'd0;

assign m_axi_mm_video_0_ARBURST = 2'd0;

assign m_axi_mm_video_0_ARCACHE = 4'd0;

assign m_axi_mm_video_0_ARID = 1'd0;

assign m_axi_mm_video_0_ARLEN = 32'd0;

assign m_axi_mm_video_0_ARLOCK = 2'd0;

assign m_axi_mm_video_0_ARPROT = 3'd0;

assign m_axi_mm_video_0_ARQOS = 4'd0;

assign m_axi_mm_video_0_ARREGION = 4'd0;

assign m_axi_mm_video_0_ARSIZE = 3'd0;

assign m_axi_mm_video_0_ARUSER = 1'd0;

assign m_axi_mm_video_0_ARVALID = 1'b0;

assign m_axi_mm_video_0_AWADDR = p_cast_cast_cast_reg_236;

assign m_axi_mm_video_0_AWBURST = 2'd0;

assign m_axi_mm_video_0_AWCACHE = 4'd0;

assign m_axi_mm_video_0_AWID = 1'd0;

assign m_axi_mm_video_0_AWLEN = wide_trip_count_cast_reg_241;

assign m_axi_mm_video_0_AWLOCK = 2'd0;

assign m_axi_mm_video_0_AWPROT = 3'd0;

assign m_axi_mm_video_0_AWQOS = 4'd0;

assign m_axi_mm_video_0_AWREGION = 4'd0;

assign m_axi_mm_video_0_AWSIZE = 3'd0;

assign m_axi_mm_video_0_AWUSER = 1'd0;

assign m_axi_mm_video_0_RREADY = 1'b0;

assign m_axi_mm_video_0_WDATA = strmDstPxl_read_reg_265;

assign m_axi_mm_video_0_WID = 1'd0;

assign m_axi_mm_video_0_WLAST = 1'b0;

assign m_axi_mm_video_0_WSTRB = 16'd65535;

assign m_axi_mm_video_0_WUSER = 1'd0;

assign or_ln130_fu_171_p2 = (icmp_ln132_fu_166_p2 | ap_phi_mux_first_iter_0_phi_fu_123_p4);

assign p_cast_cast_cast_fu_131_p1 = $signed(p_cast_cast);

assign select_ln132_fu_183_p3 = ((icmp_ln132_fu_166_p2[0:0] == 1'b1) ? 28'd1 : add_ln132_fu_177_p2);

assign wide_trip_count_cast_fu_135_p1 = wide_trip_count;

always @ (posedge ap_clk) begin
    wide_trip_count_cast_reg_241[63:28] <= 36'b000000000000000000000000000000000000;
end

endmodule //aximm_test0_fill_data_times_v2_Pipeline_loop_preload_loop_burst
